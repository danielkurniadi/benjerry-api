// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/iqdf/benjerry-service/domain"
	mock "github.com/stretchr/testify/mock"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, product
func (_m *ProductRepository) Create(ctx context.Context, product domain.Product) error {
	ret := _m.Called(ctx, product)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Product) error); ok {
		r0 = rf(ctx, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, productID
func (_m *ProductRepository) Delete(ctx context.Context, productID string) error {
	ret := _m.Called(ctx, productID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, productID
func (_m *ProductRepository) Get(ctx context.Context, productID string) (domain.Product, error) {
	ret := _m.Called(ctx, productID)

	var r0 domain.Product
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Product); ok {
		r0 = rf(ctx, productID)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, productID, product
func (_m *ProductRepository) Update(ctx context.Context, productID string, product domain.Product) error {
	ret := _m.Called(ctx, productID, product)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Product) error); ok {
		r0 = rf(ctx, productID, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
